//===========================================================================
#ifndef M_KalmanLinearH
#define M_KalmanLinearH
//===========================================================================
#include "mpiElement.h"
//===========================================================================

class TKalmanLinear : public TElement {
private:
      // ----
         bool       CalcFiltrWithBeginInit;  // -- Если да, то фильтр с начальной оценкой параметров траектории ---
         TFloat     PFil;                    // --- Память фильтра [ PFILL ] ---
         TFloat     p11, p12, p22;           // --- Элементы матрици ошибок фильтрациии на текущем шаге ----
         TFloat     N;                       // --- Количество точек начальных параметров траектории
      // ----


      // ---- Расчетные значения -----
         TFloat     tk, tk_1; // ---- Текущее и предыдущее время счета ---
         TFloat     xe, ye, ze; // ---- Екстраполированные значения координат --------
         TFloat     c1, c2;
         TFloat     Cur_p11, Cur_p12, Cur_p22;           // --- Элементы матрици ошибок фильтрациии на текущем шаге ----
         TFloat     NULLValue[4];

      // ----
         int        InputCounter;

public:
        TKalmanLinear();

        virtual void     SaveToStream(TStream *aStream);
        virtual void     LoadFromStream(TStream *aStream);
        virtual void     DrawElementFace();
        virtual void     Edit();
        virtual void     Copy(void *aElement);
        virtual void     Init();
        virtual void     InitBeforeRun(){};
        virtual void     Run();
        virtual void     DoneRun(){};
        static TKalmanLinear *Create() { return new TKalmanLinear(); };
};
//===========================================================================
#endif
