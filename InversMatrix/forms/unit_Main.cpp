//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "mpiType.h"

#include "unit_Main.h"
#include "stdio.h"

#include "inv_Gaus_0_f.h"
#include "inv_Gaus_1_f.h"
#include "inv_LU.h"
#include "inv_Sharov.h"
#include "inv_SPRY.h"
#include "inv_zhordan_0_f.h"
#include "inv_zhordan_1_f.h"
#include "inv_zhordan_2_f.h"
#include "inv_hz_1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm19 *Form19;
//---------------------------------------------------------------------------
const int mSize = 8;
TFloat inMatrix[mSize*mSize] = {          34647164767.73072815000000000000,            10777587522.09408379000000000000,             27647987966.06141662000000000000,    65435742380650733570.00000000000000000000,     2451620252202038784.00000000000000000000,    32160219242870116350.00000000000000000000,         454103306044084.81250000000000000000,        1166296857001689.25000000000000000000,
                                 10777587522.09408379000000000000,              3768217626.89955425200000000000,              8726651292.05212974600000000000,    19528545182034264060.00000000000000000000,      984733903368086528.00000000000000000000,    10083334201869299712.00000000000000000000,         156049436105320.06250000000000000000,         361205875582183.56250000000000000000,
                                 27647987966.06141662000000000000,              8726651292.05212974600000000000,             22674297015.51004028000000000000,    50288664891275091970.00000000000000000000,     1964812231427648512.00000000000000000000,    26837844241530064900.00000000000000000000,         361205875582183.56250000000000000000,         938114290243663.00000000000000000000,
                        65435742380650733570.00000000000000000000,    19528545182034264060.00000000000000000000,    50288664891275091970.00000000000000000000,    134062147946178703700000000000.0000000000,    4442980395883603385000000000.000000000000,    58949661742236853140000000000.00000000000,    856912123160335447200000.0000000000000000,    2215549198053935841000000.000000000000000,
                         2451620252202038784.00000000000000000000,      984733903368086528.00000000000000000000,     1964812231427648512.00000000000000000000,    4442980395883603385000000000.000000000000,    313089750476783663900000000.0000000000000,    2238655939697906892000000000.000000000000,    41053543666935777980000.00000000000000000,    81766407309474180100000.00000000000000000,
                        32160219242870116350.00000000000000000000,    10083334201869299712.00000000000000000000,    26837844241530064900.00000000000000000000,    58949661742236853140000000000.00000000000,    2238655939697906892000000000.000000000000,    33068167784113978410000000000.00000000000,    418714145228013663400000.0000000000000000,    1113492258674117769000000.000000000000000,
                             454103306044084.81250000000000000000,         156049436105320.06250000000000000000,         361205875582183.56250000000000000000,    856912123160335447200000.0000000000000000,    41053543666935777980000.00000000000000000,    418714145228013663400000.0000000000000000,     6581445069738033152.00000000000000000000,    15257851616344821760.00000000000000000000,
                            1166296857001689.25000000000000000000,         361205875582183.56250000000000000000,         938114290243663.00000000000000000000,    2215549198053935841000000.000000000000000,    81766407309474180100000.00000000000000000,    1113492258674117769000000.000000000000000,    15257851616344821760.00000000000000000000,    39660933773628432380.00000000000000000000};
/*
const int mSize = 10;
TFloat inMatrix[mSize*mSize] = {          34647164767.73072815000000000000,            10777587522.09408379000000000000,             27647987966.06141662000000000000,    65435742380650733570.00000000000000000000,     2451620252202038784.00000000000000000000,    32160219242870116350.00000000000000000000,         454103306044084.81250000000000000000,        1166296857001689.25000000000000000000,         361205875582183.56250000000000000000,                  823619.81640625000000000000,
                                 10777587522.09408379000000000000,              3768217626.89955425200000000000,              8726651292.05212974600000000000,    19528545182034264060.00000000000000000000,      984733903368086528.00000000000000000000,    10083334201869299712.00000000000000000000,         156049436105320.06250000000000000000,         361205875582183.56250000000000000000,         125760387450538.25000000000000000000,                  260986.96044921875000000000,
                                 27647987966.06141662000000000000,              8726651292.05212974600000000000,             22674297015.51004028000000000000,    50288664891275091970.00000000000000000000,     1964812231427648512.00000000000000000000,    26837844241530064900.00000000000000000000,         361205875582183.56250000000000000000,         938114290243663.00000000000000000000,         295043785803680.87500000000000000000,                  669663.48437500000000000000,
                        65435742380650733570.00000000000000000000,    19528545182034264060.00000000000000000000,    50288664891275091970.00000000000000000000,    134062147946178703700000000000.0000000000,    4442980395883603385000000000.000000000000,    58949661742236853140000000000.00000000000,    856912123160335447200000.0000000000000000,    2215549198053935841000000.000000000000000,    657934248530870980800000.0000000000000000,        1489601070968840.25000000000000000000,
                         2451620252202038784.00000000000000000000,      984733903368086528.00000000000000000000,     1964812231427648512.00000000000000000000,    4442980395883603385000000000.000000000000,    313089750476783663900000000.0000000000000,    2238655939697906892000000000.000000000000,    41053543666935777980000.00000000000000000,    81766407309474180100000.00000000000000000,    32701295833515967900000.00000000000000000,          59012340393207.22656000000000000000,
                        32160219242870116350.00000000000000000000,    10083334201869299712.00000000000000000000,    26837844241530064900.00000000000000000000,    58949661742236853140000000000.00000000000,    2238655939697906892000000000.000000000000,    33068167784113978410000000000.00000000000,    418714145228013663400000.0000000000000000,    1113492258674117769000000.000000000000000,    348237312703916970900000.0000000000000000,         776042207504257.12500000000000000000,
                             454103306044084.81250000000000000000,         156049436105320.06250000000000000000,         361205875582183.56250000000000000000,    856912123160335447200000.0000000000000000,    41053543666935777980000.00000000000000000,    418714145228013663400000.0000000000000000,     6581445069738033152.00000000000000000000,    15257851616344821760.00000000000000000000,     5218404841750802432.00000000000000000000,             10777587522.09408379000000000000,
                            1166296857001689.25000000000000000000,         361205875582183.56250000000000000000,         938114290243663.00000000000000000000,    2215549198053935841000000.000000000000000,    81766407309474180100000.00000000000000000,    1113492258674117769000000.000000000000000,    15257851616344821760.00000000000000000000,    39660933773628432380.00000000000000000000,    12234895571256815620.00000000000000000000,             27647987966.06141662000000000000,
                             361205875582183.56250000000000000000,         125760387450538.25000000000000000000,         295043785803680.87500000000000000000,    657934248530870980800000.0000000000000000,    32701295833515967900000.00000000000000000,    348237312703916970900000.0000000000000000,     5218404841750802432.00000000000000000000,    12234895571256815620.00000000000000000000,     4240562989290040320.00000000000000000000,              8726651292.05212974600000000000,
                                      823619.81640625000000000000,                  260986.96044921875000000000,                  669663.48437500000000000000,        1489601070968840.25000000000000000000,          59012340393207.22656000000000000000,         776042207504257.12500000000000000000,             10777587522.09408379000000000000,             27647987966.06141662000000000000,              8726651292.05212974600000000000,                      20.00000000000000000000};
*/


// inv_0_zhordan_f --- Обращение вещественной матрицы методом Жордана без выбора ведущего элемента
// inv_1_zhordan_f --- Обращение вещественной матрицы методом Жордана с выбором ведущего элемента по столбцу
// inv_2_zhordan_f --- Обращение матрицы методом Жордана с выбором ведущего элемента по всей матрице

//===========================================================================
void Mul_Matrix(unsigned short int aRows1, unsigned short int aCol1, TFloat *m1,
                unsigned short int aRows2, unsigned short int aCol2, TFloat *m2, TFloat *out_Matrix)
{
    TFloat value;

    for(unsigned short int  i = 0; i < aRows1; i++)
        for(unsigned short int  j = 0; j < aCol2; j++) {
             value = 0;
             for (unsigned short int  k = 0; k < aRows2; k++)
                  value += m1[i*aCol1 + k]*m2[k*aCol2 + j];

             out_Matrix[i*aCol2 + j] = value;
        }
}

//===========================================================================
void TForm19::PrintMatrix(TStringGrid *sg, bool LongSize, unsigned int RowCount, unsigned int ColumCount, char *aCaption, TFloat *m, double coef)
{
    for ( int i = 0; i < RowCount; i++ )
    {
        sg->Rows[i]->Clear();
        for ( int j = 0; j < ColumCount; j++ )
        {
            if ( LongSize == true  ) sg->Cells[j][i] = FloatToStrF(m[i*ColumCount + j] / coef, ffFixed   , 20, 9);
            if ( LongSize == false ) sg->Cells[j][i] = FloatToStrF(m[i*ColumCount + j] / coef, ffExponent,  6, 5);
        }
    }

//    fprintf(aFile, "\n\n%s\n",aCaption);
//
//    for (unsigned int i = 0; i < RowCount; i++)
//    {
//       for (unsigned int k = 0; k < ColumCount; k++)
//          if (LongSize == true) fprintf(aFile, "%35.9f", m[i*ColumCount + k] / coef);
//          else fprintf(aFile, "%20.9f", m[i*ColumCount + k] / coef);
//
//       fprintf(aFile, "\n");
//    }
}

void TForm19::CalcFunction (TCallInvMethod aCallFunc, int aSize, TFloat* inMatrix, char *Caption)
{
    LARGE_INTEGER f, q1, q2;
    QueryPerformanceFrequency(&f);
 // ------------
    TFloat *outMatrix = new TFloat[aSize*aSize];
    TFloat *mulMatrix = new TFloat[aSize*aSize];

    memset(outMatrix, 0, sizeof(TFloat)*aSize*aSize);
    memset(mulMatrix, 0, sizeof(TFloat)*aSize*aSize);

 // ------------

    printf("%s\n", Caption);
    QueryPerformanceCounter(&q1);
    for (int i = 0; i < 10000; i ++)
         aCallFunc(aSize, inMatrix, outMatrix);
    QueryPerformanceCounter(&q2);
    Mul_Matrix(aSize, aSize, inMatrix, aSize, aSize, outMatrix, mulMatrix);
	PrintMatrix(StringGrid2, true, aSize, aSize, Caption, mulMatrix,1);

    Label3->Caption = "Время счета 10000 циклов = " + FloatToStrF((q2.QuadPart-q1.QuadPart) / (double)f.QuadPart, ffFixed, 20, 9) + "  сек";
 // ------------
    delete [] outMatrix;
    delete [] mulMatrix;
}

//---------------------------------------------------------------------------
__fastcall TForm19::TForm19(TComponent* Owner)
    : TForm(Owner)
{
}

//---------------------------------------------------------------------------
void __fastcall TForm19::Button1Click(TObject *Sender)
{
    for (int i = 0; i < 100; i++)
       inMatrix[i] = inMatrix[i];


	PrintMatrix(StringGrid1, false, mSize, mSize, "Base Matrix [A]:", inMatrix, 1);

  // ------------ Метод шарова ----------
    //CalcFunction(inv_Sharov     , mSize, inMatrix, "Sharov    --- MULL Matrix [A*A^-1]:");

    CalcFunction(inv_hz_1, mSize, inMatrix, "Zhordan 0 --- MULL Matrix [A*A^-1]:");   // --- Обращение вещественной матрицы методом Жордана без выбора ведущего элемента
  // --- Обращение матрицы методом Жордана
    //CalcFunction(inv_zhordan_0_f, mSize, inMatrix, "Zhordan 0 --- MULL Matrix [A*A^-1]:");   // --- Обращение вещественной матрицы методом Жордана без выбора ведущего элемента
    //CalcFunction(inv_zhordan_1_f, mSize, inMatrix, "Zhordan 1 --- MULL Matrix [A*A^-1]:");   // --- Обращение вещественной матрицы методом Жордана с выбором ведущего элемента по столбцу
    //CalcFunction(inv_zhordan_2_f, mSize, inMatrix, "Zhordan 2 --- MULL Matrix [A*A^-1]:");   // --- Обращение матрицы методом Жордана с выбором ведущего элемента по всей матрице

  // --- Обращение матрицы методом Гаусса
    //CalcFunction(inv_Gaus_0_f, mSize, inMatrix, "Gaus 0 --- MULL Matrix [A*A^-1]:");   // --- Обращение матрицы методом Гаусса с выбором ведущего элемента по столбцу и оценка числа обусловленности матрицы
    //CalcFunction(inv_Gaus_1_f, mSize, inMatrix, "Gaus 1 --- MULL Matrix [A*A^-1]:");   // --- Обращение матрицы методом Гаусса с выбором ведущего элемента по столбцу ---

  // --- Обращение матрицы методом SPRY ---
    //CalcFunction(inv_Spry_0, mSize, inMatrix, "Spry 0 --- MULL Matrix [A*A^-1]:");
    //CalcFunction(inv_Spry_1, mSize, inMatrix, "Spry 1 --- MULL Matrix [A*A^-1]:");
    //CalcFunction(inv_Spry_2, mSize, inMatrix, "Spry 2 --- MULL Matrix [A*A^-1]:");

    CalcFunction(inv_LU, mSize, inMatrix, "LU --- MULL Matrix [A*A^-1]:");

  // ------------
}
//---------------------------------------------------------------------------
void __fastcall TForm19::StringGrid2Exit(TObject *Sender)
{
    TGridRect gr;

    gr.Left   = -1;
    gr.Top    = -1;
    gr.Right  = -1;
    gr.Bottom = -1;

    ((TStringGrid*)Sender)->Selection = gr;
}
//---------------------------------------------------------------------------

void __fastcall TForm19::FormShow(TObject *Sender)
{
     for (int i = 0; i < this->ComponentCount; i++)
     {
        TWinControl* wc = dynamic_cast<TWinControl*>(this->Components[i]);
        if ( wc != NULL ) wc->SetFocus();
     }
}
//---------------------------------------------------------------------------

