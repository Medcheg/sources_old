//---------------------------------------------------------------------------
#ifndef mpiFILTRSH
#define mpiFILTRSH
//---------------------------------------------------------------------------
#include "mpiTypes.h"
//---------------------------------------------------------------------------
enum TKanal {KanalX, KanalY, KanalZ};

class TKalman
{
private:

        TFloat fT0;

        TFloat  x[3];

        TFloat  y_e[4];
        TFloat  y_o[4];
        TFloat py_o[4];

        TFloat __fastcall Get_Xe (){ return  y_e[0]; }
        TFloat __fastcall Get_Xo (){ return  y_o[0]; }
        TFloat __fastcall Get_pXo(){ return  py_o[0];}
public:
      // --- Коэффициенты для расчета АЧХ (Перед запуском нуно делать инит!!!) -------
        struct{ TFloat a[3]; TFloat b[3]; }ZCoef_Xe;
        struct{ TFloat a[3]; TFloat b[3]; }ZCoef_Xo;
        struct{ TFloat a[3]; TFloat b[3]; }ZCoef_pXo;

        TFloat k1, k2; // ------- Коэффициенты фильтра --------

        void Init(TFloat aT0);
        void Run(TFloat Value);
        TKalman();

        __property TFloat  Xe  = { read =  Get_Xe }; // -------- Екстраполированое значение движения цели --------
        __property TFloat  Xo  = { read =  Get_Xo }; // -------- Оценочное положение цели  --------
        __property TFloat pXo  = { read = Get_pXo }; // -------- Оценка скорости цели ---------
};

//---------------------------------------------------------------------------
//-----------------------------   DST1   ------------------------------------
//---------------------------------------------------------------------------
//----------   Фильтр для оценки сигнала CO + C1*t  -------------------------
//---------------------------------------------------------------------------
class TDST1
{
private:
        TFloat  a0,  a1,  a2,  a3;
        TFloat pa0, pa1, pa2, pa3;


        TFloat *x;
        TFloat  y[3], py[3];

        TFloat __fastcall Get_Xe (){ return  y [0]; } // --------- Оценка екстраполированого сигнала или координат цели ----------
        TFloat __fastcall Get_pXo(){ return  py[0]; } // --------- Оценка скорости -----------
public:
      // --- Коэффициенты для расчета АЧХ (Перед запуском нуно делать инит!!!) -------
        struct{ TFloat *a; TFloat b[3]; }ZCoef_Xe;
        struct{ TFloat *a; TFloat b[3]; }ZCoef_pXo;

        int    N;     // ------- Параметры фильтра --------
        TFloat Gamma; // ------- Параметры фильтра --------

        void Init(TFloat aT0);
        void Run(TFloat Value);
        TDST1();
       ~TDST1();

        __property TFloat  Xe  = { read =  Get_Xe }; // -------- Екстраполированое значение движения цели --------
        __property TFloat pXo  = { read = Get_pXo }; // -------- Оценка скорости цели ---------
};


//---------------------------------------------------------------------------
//-----------------------------   DST3   ------------------------------------
//---------------------------------------------------------------------------
//----------   Фильтр для оценки сигнала CO + C1*t + C2*t^2   ---------------
//---------------------------------------------------------------------------
class TDST3{
private:
        TFloat *x;
        TFloat  y[4];
        TFloat __fastcall Get_Out (){ return  y[0]; }
public:
      // --- Коэффициенты для расчета АЧХ (Перед запуском нуно делать инит!!!) -------
        TFloat *a;   // ---- Числитель -------
        TFloat b[4]; // ---- Знаменатель -----

        int    N;     // ------- Параметры фильтра --------
        TFloat Gamma; // ------- Параметры фильтра --------

        void Init(TFloat aT0);
        void Run(TFloat Value);

        TDST3() {x = NULL; a  = NULL; N = 2; Gamma = 0;}
       ~TDST3() {if (x != NULL) free (x); if (a != NULL) free (a);};
        __property TFloat  Out  = { read =  Get_Out }; // -------- Екстраполированое значение движения цели --------
};

//---------------------------------------------------------------------------
//----------------------------   DST4   -------------------------------------
//---------------------------------------------------------------------------
//-----------------   Фильтр для оценки сигнала C2   ---- из сигнала CO + C1*t + C2*t^2--------------------
//---------------------------------------------------------------------------
class TDST4{
private:
        TFloat *x;
        TFloat  y[4];
        TFloat __fastcall Get_Out (){ return  y[0]; }
public:
      // --- Коэффициенты для расчета АЧХ (Перед запуском нуно делать инит!!!) -------
        TFloat *a;   // ---- Числитель -------
        TFloat b[4]; // ---- Знаменатель -----

        int    N;     // ------- Параметры фильтра --------
        TFloat Gamma; // ------- Параметры фильтра --------

        void Init(TFloat aT0);
        void Run(TFloat Value);

        TDST4() {x = NULL; a  = NULL; N = 2; Gamma = 0;}
       ~TDST4() {if (x != NULL) free (x); if (a != NULL) free (a);};
        __property TFloat  Out  = { read =  Get_Out }; // -------- Екстраполированое значение движения цели --------
};
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//----------------------------   DST5   -------------------------------------
//---------------------------------------------------------------------------
//-----------------   Фильтр для оценки сигнала C1   ----- из стгнала  CO + C1*t + C2*t^2 -------------------
//---------------------------------------------------------------------------
class TDST5{
private:
        TFloat *x;
        TFloat  y[4];

        TFloat   fT0;
        TFloat   Value_;
        TFloat __fastcall Get_Out (){ return  y[0]; }
public:
      // --- Коэффициенты для расчета АЧХ (Перед запуском нуно делать инит!!!) -------
        TFloat *a;   // ---- Числитель -------
        TFloat b[4]; // ---- Знаменатель -----

        int    N;     // ------- Параметры фильтра --------
        TFloat Gamma; // ------- Параметры фильтра --------

        void Init(TFloat aT0);
        void Run(TFloat Value);

        TDST5() {x = NULL; a  = NULL; N = 2; Gamma = 0;}
       ~TDST5() {if (x != NULL) free (x); if (a != NULL) free (a);};
        __property TFloat  Out  = { read =  Get_Out }; // -------- Екстраполированое значение движения цели --------
};
//---------------------------------------------------------------------------

extern TKalman  *Kalman;
extern TDST1    *DST1;
extern TDST1    *DST11;
extern TDST3    *DST3;
extern TDST3    *DST33;
extern TDST4    *DST4;
extern TDST5    *DST5;

//---------------------------------------------------------------------------
#endif
