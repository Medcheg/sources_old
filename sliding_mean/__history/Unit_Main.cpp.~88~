//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit_Main.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "Chart"
#pragma link "Series"
#pragma link "TeEngine"
#pragma link "TeeProcs"
#pragma resource "*.dfm"
TForm3 *Form3;

typedef struct tag_SliderMean
{
    int   SliderBuffLength;
    int   SliderBuffPosition;
    int   SliderBuffPosition_old;
    int   isSliderBufferInited;

    float   SliderBuffLength_invert;

    float   *SliderBuffer;
    float   *SliderBuffer_invertSumm;
    float    SliderBufferSumm;
}TSliderMean;

void Init_SliderMean( TSliderMean *sm, int BuffersDepth )
{
    int i;

    sm->SliderBuffLength       = BuffersDepth;
    sm->SliderBuffPosition     = 0;
    sm->SliderBuffPosition_old = 0;
    sm->isSliderBufferInited   = 0;

    sm->SliderBuffLength_invert = (float)1.0 / (float)BuffersDepth;

    sm->SliderBuffer            = (float*) malloc( sizeof(float) * BuffersDepth );
    sm->SliderBuffer_invertSumm = (float*) malloc( sizeof(float) * BuffersDepth );
    sm->SliderBufferSumm        = (float)0.0;

    for ( i = 1; i <= BuffersDepth; i++) sm->SliderBuffer_invertSumm[i-1] = 1000.0 / (double)i;
    for ( i = 1; i <= BuffersDepth; i++) sm->SliderBuffer_invertSumm[i-1] = 1000.0 / (double)i;
}


//*****************************************************************
//
//*****************************************************************
float Get_SliderMean( TSliderMean *sm, float inValue )
{
    float retValue;

    if ( sm->SliderBuffPosition >= sm->SliderBuffLength )
    {
        sm->isSliderBufferInited = 1;
        sm->SliderBuffPosition   = 0;
    }

    // -----
    if ( sm->isSliderBufferInited == 0 )
    {
        sm->SliderBuffer[sm->SliderBuffPosition] =  inValue;
        sm->SliderBufferSumm  = sm->SliderBufferSumm + inValue;

        retValue = sm->SliderBufferSumm * sm->SliderBuffer_invertSumm[sm->SliderBuffPosition];
    }
    else
    {
        sm->SliderBufferSumm = sm->SliderBufferSumm - sm->SliderBuffer[sm->SliderBuffPosition_old];
        sm->SliderBufferSumm = sm->SliderBufferSumm + inValue;
        sm->SliderBuffer[sm->SliderBuffPosition] = inValue;

        retValue = sm->SliderBufferSumm * sm->SliderBuffLength_invert;
    }

    sm->SliderBuffPosition_old = sm->SliderBuffPosition;
    sm->SliderBuffPosition++;

    return retValue;
}

__fastcall TForm3::TForm3(TComponent* Owner)
	: TForm(Owner)
{
    TSliderMean sm;
    Init_SliderMean( &sm, 60 );

    Series1->Clear();
    Series2->Clear();
    for ( int i = 0; i < 10000; i++ )
    {
        double val  = 40.0;// - Random(3) + Random(3);
        double mval = Get_SliderMean( &sm, val );

        Series1->Add( val);
        Series2->Add(mval);
    }
}
//---------------------------------------------------------------------------
